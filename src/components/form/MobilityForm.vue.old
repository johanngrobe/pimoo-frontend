<template>
  <BaseCard :collapsable="true" :isCollapsed="formState.mobilityForm">
    <template #header>
      <div @click="toggleForm('mobilityForm')">
        <BaseSubheading>Allgemeine Informationen</BaseSubheading>
      </div>
    </template>
    <MobilitySubmissionForm
      :editMode="props.editMode"
      :item="props.item"
      ref="mobilitySubmissionFormRef"
    />
  </BaseCard>
  <BaseCard :collapsable="true" :isCollapsed="formState.mobilityObjectiveForm">
    <template #header>
      <BaseSubheading @click="toggleForm('mobilityObjectiveForm')">Leitziele</BaseSubheading>
    </template>
    <div v-for="mainObjective in mobilityStore.mobilityObjectiveForm" :key="index">
      <MobilityMainObjectiveForm ref="mobilityObjectiveForm" />
    </div>
  </BaseCard>
  <div class="flex w-full justify-end mt-7">
    <div v-if="editModeAfterSubmit" class="flex items-center gap-2">
      <ButtonSync @click="handleSubmit" type="submit">Aktualisieren</ButtonSync>
      <ButtonDownload @click="onExport">PDF-Export</ButtonDownload>
    </div>
    <div v-else>
      <ButtonSave @click="handleSubmit" type="submit">Speichern</ButtonSave>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue'
import { useMobilitySubmissionStore } from '@/stores/mobilitySubmission'
import { exportItem } from '@/composables/crud'
import MobilitySubmissionForm from '@/components/form/MobilitySubmissionForm.vue'
import MobilityMainObjectiveForm from '@/components/form/MobilityObjectiveFormMain.vue'
import ButtonDownload from '@/components/ui/ButtonDownload.vue'
import ButtonSync from '@/components/ui/ButtonSync.vue'
import ButtonSave from '@/components/ui/ButtonSave.vue'

const props = defineProps({
  editMode: {
    type: Boolean,
    default: false
  },
  item: {
    type: Object,
    default: null
  }
})

const mobilityStore = useMobilitySubmissionStore()

const editModeAfterSubmit = ref(false)
// Create a reactive local copy of the form state
const formState = ref({ ...props.initialFormState })

// Watch for prop changes to update local state if the prop changes dynamically
watch(
  () => props.initialFormState,
  (newVal) => {
    formState.value = { ...newVal }
  }
)

const toggleForm = (formName) => {
  formState.value[formName] = !formState.value[formName]
}

// Emit event to close modal
const emit = defineEmits(['close-modal', 'item-updated'])

const closeModal = () => {
  if (props.editMode) {
    emit('close-modal')
  }
}

const mobilitySubmissionFormRef = ref(null)

const handleSubmit = async () => {
  if (props.editMode) {
  }
  if (mobilitySubmissionFormRef.value) {
    await mobilitySubmissionFormRef.value.onSubmit()
  }

  if (mobilityStore.formValid.mobilityForm) {
    if (props.editMode) {
      await mobilityStore.updateMobilitySubmission(props.submissionId)
      closeModal()
      emit('item-updated')
    } else {
      await mobilityStore.submitMobilityForm()
      editModeAfterSubmit.value = true
    }
  }
}

const onExport = async (modelId) => {
  await exportItem({
    model: 'mobility',
    modelId,
    detail: {
      success: 'Mobilitätscheck erfolgreich exportiert',
      error: 'Fehler beim Exportieren des Mobilitätschecks'
    }
  })
}
</script>

<style></style>
